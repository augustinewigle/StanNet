# assign patients to treatment - following a simple randomization procedure
df <- data.frame(Study=sort(rep(seq(1, ns), 2)),
trtnum = numeric(ns*2),
events= numeric(ns*2),
sampleSize = numeric(ns*2)) # preallocate df to hold meta-analytic info
outcomes <- matrix(nrow = np, ncol = 2) # preallocate to holds trt assignment and outcome (success or fail)
for (k in 1:ns) {
trt <- rbinom(np,1,0.5) # if trt = 1, assign to Arm1 else assign to Arm2
trt1 <-trial_key[k,]$Arm1
trt2 <-trial_key[k,]$Arm2
for (ii in 1:length(trt)) {
if (trt[ii]) {
outcomes[ii,] <- c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,1]), trt1) # Determine outcome for this patient using
} else {
outcomes[ii,] <-  c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,2]), trt2) # Add Arm2 probability for this patient to outcome_p
}
}
outcome1 <- sum(outcomes[outcomes[,2] == trt1,1])
outcome2 <-sum(outcomes[outcomes[,2] == trt2,1])
ss1 <- nrow(outcomes[outcomes[,2]== trt1,])
ss2 <- nrow(outcomes[outcomes[,2]== trt2,])
addtodf <- rbind(cbind(trt1, outcome1, ss1), cbind(trt2, outcome2, ss2))
df[df$Study == k,2:4] <- addtodf
}
# Put together data
data <- data.prep(df, varname.t = "trtnum", varname.s = "Study")
# Perform analysis using StanNet
model <- makeStanmodel(data = data, outcome = "events", N = "sampleSize", reference = "1", family = "binomial", link = "logit", effects = "random")
fit <- runStan(model = model, n.iter = 10000)
fit2 <- convertToBUGSnetRun(fit)
# check if true d are covered in credible intervals
citable <- nma.league(fit2)$longtable[2:nt,c("lci", "uci")]
# record the lengths
length[i,] <- t(citable$uci-citable$lci)
# check and record if d is included in the interval
coverage[i,] <- d>citable$lci & d<citable$uci
}
# Calculate coverage probabilities and avg lengths
apply(length, MARGIN = 2, mean)
apply(coverage, MARGIN = 2, mean)
warnings()
for(i in 1:Nsim) {
# assign patients to treatment - following a simple randomization procedure
df <- data.frame(Study=sort(rep(seq(1, ns), 2)),
trtnum = numeric(ns*2),
events= numeric(ns*2),
sampleSize = numeric(ns*2)) # preallocate df to hold meta-analytic info
outcomes <- matrix(nrow = np, ncol = 2) # preallocate to holds trt assignment and outcome (success or fail)
for (k in 1:ns) {
trt <- rbinom(np,1,0.5) # if trt = 1, assign to Arm1 else assign to Arm2
trt1 <-trial_key[k,]$Arm1
trt2 <-trial_key[k,]$Arm2
for (ii in 1:length(trt)) {
if (trt[ii]) {
outcomes[ii,] <- c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,1]), trt1) # Determine outcome for this patient using
} else {
outcomes[ii,] <-  c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,2]), trt2) # Add Arm2 probability for this patient to outcome_p
}
}
outcome1 <- sum(outcomes[outcomes[,2] == trt1,1])
outcome2 <-sum(outcomes[outcomes[,2] == trt2,1])
ss1 <- nrow(outcomes[outcomes[,2]== trt1,])
ss2 <- nrow(outcomes[outcomes[,2]== trt2,])
addtodf <- rbind(cbind(trt1, outcome1, ss1), cbind(trt2, outcome2, ss2))
df[df$Study == k,2:4] <- addtodf
}
# Put together data
data <- data.prep(df, varname.t = "trtnum", varname.s = "Study")
# Perform analysis using StanNet
model <- makeStanmodel(data = data, outcome = "events", N = "sampleSize", reference = "1", family = "binomial", link = "logit", effects = "random")
fit <- runStan(model = model, n.iter = 12000)
fit2 <- convertToBUGSnetRun(fit)
# check if true d are covered in credible intervals
citable <- nma.league(fit2)$longtable[2:nt,c("lci", "uci")]
# record the lengths
length[i,] <- t(citable$uci-citable$lci)
# check and record if d is included in the interval
coverage[i,] <- d>citable$lci & d<citable$uci
}
Nsim <- 10
length <- matrix(nrow = Nsim, ncol = nt-1)
colnames(length) <- c("d12", "d13")
coverage <- length
for(i in 1:Nsim) {
# assign patients to treatment - following a simple randomization procedure
df <- data.frame(Study=sort(rep(seq(1, ns), 2)),
trtnum = numeric(ns*2),
events= numeric(ns*2),
sampleSize = numeric(ns*2)) # preallocate df to hold meta-analytic info
outcomes <- matrix(nrow = np, ncol = 2) # preallocate to holds trt assignment and outcome (success or fail)
for (k in 1:ns) {
trt <- rbinom(np,1,0.5) # if trt = 1, assign to Arm1 else assign to Arm2
trt1 <-trial_key[k,]$Arm1
trt2 <-trial_key[k,]$Arm2
for (ii in 1:length(trt)) {
if (trt[ii]) {
outcomes[ii,] <- c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,1]), trt1) # Determine outcome for this patient using
} else {
outcomes[ii,] <-  c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,2]), trt2) # Add Arm2 probability for this patient to outcome_p
}
}
outcome1 <- sum(outcomes[outcomes[,2] == trt1,1])
outcome2 <-sum(outcomes[outcomes[,2] == trt2,1])
ss1 <- nrow(outcomes[outcomes[,2]== trt1,])
ss2 <- nrow(outcomes[outcomes[,2]== trt2,])
addtodf <- rbind(cbind(trt1, outcome1, ss1), cbind(trt2, outcome2, ss2))
df[df$Study == k,2:4] <- addtodf
}
# Put together data
data <- data.prep(df, varname.t = "trtnum", varname.s = "Study")
# Perform analysis using StanNet
model <- makeStanmodel(data = data, outcome = "events", N = "sampleSize", reference = "1", family = "binomial", link = "logit", effects = "random")
fit <- runStan(model = model, n.iter = 12000)
fit2 <- convertToBUGSnetRun(fit)
# check if true d are covered in credible intervals
citable <- nma.league(fit2)$longtable[2:nt,c("lci", "uci")]
# record the lengths
length[i,] <- t(citable$uci-citable$lci)
# check and record if d is included in the interval
coverage[i,] <- d>citable$lci & d<citable$uci
}
# Calculate coverage probabilities and avg lengths
apply(length, MARGIN = 2, mean)
apply(coverage, MARGIN = 2, mean)
warnings()
# Parameters
muk <- c(0.5, 0.45, 0.55) # Study-specific baseline (probability of event in treatment A in kth study)
d <- c(1.2, 1.3) # Means of random effects distribution
vark <- 0.5 # variance for random effects distributions - could change so its different for each study
Sigmak <- matrix(vark/2, nrow = nt-1, ncol = nt-1)
diag(Sigmak) <- vark
vari <- 1 # variance of distribution for patient-specific noise
# Generate patient-specific noise
set.seed(25)
Sigmak
vari <- 1 # variance of distribution for patient-specific noise
# Generate patient-specific noise
set.seed(25)
noise <- rnorm(tot_patients, 0, 1)
delta <- matrix(nrow = ns, ncol = nt)
delta[,1] <- 0 # since comparison reference to itself is 0
delta[,2:nt] <- mvrnorm(ns, mu = d, Sigma = Sigmak)
pat_logit_p <-matrix(nrow = tot_patients, ncol = nt+1)
for(i in 1:tot_patients) {
for(j in 1:nt) {
k <- 1 + as.numeric(i>np) + as.numeric(i>(2*np)) # calculate which study the patient is in
pat_logit_p[i,j] <- muk[k] + delta[k,j] + noise[i]
}
pat_logit_p[i,nt+1] <- k # identify which study
}
vari <- 0.5 # variance of distribution for patient-specific noise
# Parameters
muk <- c(0.5, 0.45, 0.55) # Study-specific baseline (probability of event in treatment A in kth study)
d <- c(1.2, 1.3) # Means of random effects distribution
vark <- 1 # variance for random effects distributions - could change so its different for each study
Sigmak <- matrix(vark/2, nrow = nt-1, ncol = nt-1)
diag(Sigmak) <- vark
vari <- 0.5 # variance of distribution for patient-specific noise
# Generate patient-specific noise
set.seed(25)
noise <- rnorm(tot_patients, 0, 1)
delta <- matrix(nrow = ns, ncol = nt)
delta[,1] <- 0 # since comparison reference to itself is 0
delta[,2:nt] <- mvrnorm(ns, mu = d, Sigma = Sigmak)
pat_logit_p <-matrix(nrow = tot_patients, ncol = nt+1)
for(i in 1:tot_patients) {
for(j in 1:nt) {
k <- 1 + as.numeric(i>np) + as.numeric(i>(2*np)) # calculate which study the patient is in
pat_logit_p[i,j] <- muk[k] + delta[k,j] + noise[i]
}
pat_logit_p[i,nt+1] <- k # identify which study
}
bernoulli_p <- cbind(expit(pat_logit_p[,1:nt]), pat_logit_p[,nt+1]) # store the probabilities of outcome for each patient depending which trial and which treatment they get allocated to
trial_key <- as.data.frame(t(matrix(c(1,1,2,2,2,3,3,1,3), nrow = 3, ncol = 3, dimnames = list(c("Study", "Arm1", "Arm2")))))
patient_data <- matrix(nrow = tot_patients, ncol = nt)# rows are patients, columns are: outcome probability for treatment 1/2, and trial number
for(k in 1:ns) {
patient_data[(1+np*(k-1)):(np*(k)),] <- bernoulli_p[(1+np*(k-1)):(np*(k)), c(as.numeric(trial_key[k,2:nt]),nt+1)]
}
colnames(patient_data) <- c("Arm1", "Arm2", "Study")
patient_data <- as.data.frame(patient_data)
Nsim <- 10
length <- matrix(nrow = Nsim, ncol = nt-1)
colnames(length) <- c("d12", "d13")
coverage <- length
for(i in 1:Nsim) {
# assign patients to treatment - following a simple randomization procedure
df <- data.frame(Study=sort(rep(seq(1, ns), 2)),
trtnum = numeric(ns*2),
events= numeric(ns*2),
sampleSize = numeric(ns*2)) # preallocate df to hold meta-analytic info
outcomes <- matrix(nrow = np, ncol = 2) # preallocate to holds trt assignment and outcome (success or fail)
for (k in 1:ns) {
trt <- rbinom(np,1,0.5) # if trt = 1, assign to Arm1 else assign to Arm2
trt1 <-trial_key[k,]$Arm1
trt2 <-trial_key[k,]$Arm2
for (ii in 1:length(trt)) {
if (trt[ii]) {
outcomes[ii,] <- c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,1]), trt1) # Determine outcome for this patient using
} else {
outcomes[ii,] <-  c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,2]), trt2) # Add Arm2 probability for this patient to outcome_p
}
}
outcome1 <- sum(outcomes[outcomes[,2] == trt1,1])
outcome2 <-sum(outcomes[outcomes[,2] == trt2,1])
ss1 <- nrow(outcomes[outcomes[,2]== trt1,])
ss2 <- nrow(outcomes[outcomes[,2]== trt2,])
addtodf <- rbind(cbind(trt1, outcome1, ss1), cbind(trt2, outcome2, ss2))
df[df$Study == k,2:4] <- addtodf
}
# Put together data
data <- data.prep(df, varname.t = "trtnum", varname.s = "Study")
# Perform analysis using StanNet
model <- makeStanmodel(data = data, outcome = "events", N = "sampleSize", reference = "1", family = "binomial", link = "logit", effects = "random")
fit <- runStan(model = model, n.iter = 12000)
fit2 <- convertToBUGSnetRun(fit)
# check if true d are covered in credible intervals
citable <- nma.league(fit2)$longtable[2:nt,c("lci", "uci")]
# record the lengths
length[i,] <- t(citable$uci-citable$lci)
# check and record if d is included in the interval
coverage[i,] <- d>citable$lci & d<citable$uci
}
# Calculate coverage probabilities and avg lengths
apply(length, MARGIN = 2, mean)
apply(coverage, MARGIN = 2, mean)
length
# Generate patient-specific noise
set.seed(25)
noise <- rnorm(tot_patients, 0, vari)
delta <- matrix(nrow = ns, ncol = nt)
# Parameters
muk <- c(0.5, 0.45, 0.55) # Study-specific baseline (probability of event in treatment A in kth study)
d <- c(1.2, 1.3) # Means of random effects distribution
vark <- 1 # variance for random effects distributions - could change so its different for each study
Sigmak <- matrix(vark/2, nrow = nt-1, ncol = nt-1)
diag(Sigmak) <- vark
vari <- 0.5 # variance of distribution for patient-specific noise
# Generate patient-specific noise
set.seed(25)
noise <- rnorm(tot_patients, 0, vari)
delta <- matrix(nrow = ns, ncol = nt)
delta[,1] <- 0 # since comparison reference to itself is 0
delta[,2:nt] <- mvrnorm(ns, mu = d, Sigma = Sigmak)
pat_logit_p <-matrix(nrow = tot_patients, ncol = nt+1)
for(i in 1:tot_patients) {
for(j in 1:nt) {
k <- 1 + as.numeric(i>np) + as.numeric(i>(2*np)) # calculate which study the patient is in
pat_logit_p[i,j] <- muk[k] + delta[k,j] + noise[i]
}
pat_logit_p[i,nt+1] <- k # identify which study
}
bernoulli_p <- cbind(expit(pat_logit_p[,1:nt]), pat_logit_p[,nt+1]) # store the probabilities of outcome for each patient depending which trial and which treatment they get allocated to
trial_key <- as.data.frame(t(matrix(c(1,1,2,2,2,3,3,1,3), nrow = 3, ncol = 3, dimnames = list(c("Study", "Arm1", "Arm2")))))
patient_data <- matrix(nrow = tot_patients, ncol = nt)# rows are patients, columns are: outcome probability for treatment 1/2, and trial number
for(k in 1:ns) {
patient_data[(1+np*(k-1)):(np*(k)),] <- bernoulli_p[(1+np*(k-1)):(np*(k)), c(as.numeric(trial_key[k,2:nt]),nt+1)]
}
colnames(patient_data) <- c("Arm1", "Arm2", "Study")
patient_data <- as.data.frame(patient_data)
Nsim <- 10
length <- matrix(nrow = Nsim, ncol = nt-1)
colnames(length) <- c("d12", "d13")
coverage <- length
for(i in 1:Nsim) {
# assign patients to treatment - following a simple randomization procedure
df <- data.frame(Study=sort(rep(seq(1, ns), 2)),
trtnum = numeric(ns*2),
events= numeric(ns*2),
sampleSize = numeric(ns*2)) # preallocate df to hold meta-analytic info
outcomes <- matrix(nrow = np, ncol = 2) # preallocate to holds trt assignment and outcome (success or fail)
for (k in 1:ns) {
trt <- rbinom(np,1,0.5) # if trt = 1, assign to Arm1 else assign to Arm2
trt1 <-trial_key[k,]$Arm1
trt2 <-trial_key[k,]$Arm2
for (ii in 1:length(trt)) {
if (trt[ii]) {
outcomes[ii,] <- c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,1]), trt1) # Determine outcome for this patient using
} else {
outcomes[ii,] <-  c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,2]), trt2) # Add Arm2 probability for this patient to outcome_p
}
}
outcome1 <- sum(outcomes[outcomes[,2] == trt1,1])
outcome2 <-sum(outcomes[outcomes[,2] == trt2,1])
ss1 <- nrow(outcomes[outcomes[,2]== trt1,])
ss2 <- nrow(outcomes[outcomes[,2]== trt2,])
addtodf <- rbind(cbind(trt1, outcome1, ss1), cbind(trt2, outcome2, ss2))
df[df$Study == k,2:4] <- addtodf
}
# Put together data
data <- data.prep(df, varname.t = "trtnum", varname.s = "Study")
# Perform analysis using StanNet
model <- makeStanmodel(data = data, outcome = "events", N = "sampleSize", reference = "1", family = "binomial", link = "logit", effects = "random")
fit <- runStan(model = model, n.iter = 12000)
fit2 <- convertToBUGSnetRun(fit)
# check if true d are covered in credible intervals
citable <- nma.league(fit2)$longtable[2:nt,c("lci", "uci")]
# record the lengths
length[i,] <- t(citable$uci-citable$lci)
# check and record if d is included in the interval
coverage[i,] <- d>citable$lci & d<citable$uci
}
# Calculate coverage probabilities and avg lengths
apply(length, MARGIN = 2, mean)
apply(coverage, MARGIN = 2, mean)
vark <- 0.8 # variance for random effects distributions - could change so its different for each study
Sigmak <- matrix(vark/2, nrow = nt-1, ncol = nt-1)
diag(Sigmak) <- vark
vari <- 0.5 # variance of distribution for patient-specific noise
# Generate patient-specific noise
set.seed(25)
noise <- rnorm(tot_patients, 0, vari)
delta <- matrix(nrow = ns, ncol = nt)
delta[,1] <- 0 # since comparison reference to itself is 0
delta[,2:nt] <- mvrnorm(ns, mu = d, Sigma = Sigmak)
pat_logit_p <-matrix(nrow = tot_patients, ncol = nt+1)
for(i in 1:tot_patients) {
for(j in 1:nt) {
k <- 1 + as.numeric(i>np) + as.numeric(i>(2*np)) # calculate which study the patient is in
pat_logit_p[i,j] <- muk[k] + delta[k,j] + noise[i]
}
pat_logit_p[i,nt+1] <- k # identify which study
}
bernoulli_p <- cbind(expit(pat_logit_p[,1:nt]), pat_logit_p[,nt+1]) # store the probabilities of outcome for each patient depending which trial and which treatment they get allocated to
trial_key <- as.data.frame(t(matrix(c(1,1,2,2,2,3,3,1,3), nrow = 3, ncol = 3, dimnames = list(c("Study", "Arm1", "Arm2")))))
patient_data <- matrix(nrow = tot_patients, ncol = nt)# rows are patients, columns are: outcome probability for treatment 1/2, and trial number
for(k in 1:ns) {
patient_data[(1+np*(k-1)):(np*(k)),] <- bernoulli_p[(1+np*(k-1)):(np*(k)), c(as.numeric(trial_key[k,2:nt]),nt+1)]
}
colnames(patient_data) <- c("Arm1", "Arm2", "Study")
patient_data <- as.data.frame(patient_data)
Nsim <- 10
length <- matrix(nrow = Nsim, ncol = nt-1)
colnames(length) <- c("d12", "d13")
coverage <- length
for(i in 1:Nsim) {
# assign patients to treatment - following a simple randomization procedure
df <- data.frame(Study=sort(rep(seq(1, ns), 2)),
trtnum = numeric(ns*2),
events= numeric(ns*2),
sampleSize = numeric(ns*2)) # preallocate df to hold meta-analytic info
outcomes <- matrix(nrow = np, ncol = 2) # preallocate to holds trt assignment and outcome (success or fail)
for (k in 1:ns) {
trt <- rbinom(np,1,0.5) # if trt = 1, assign to Arm1 else assign to Arm2
trt1 <-trial_key[k,]$Arm1
trt2 <-trial_key[k,]$Arm2
for (ii in 1:length(trt)) {
if (trt[ii]) {
outcomes[ii,] <- c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,1]), trt1) # Determine outcome for this patient using
} else {
outcomes[ii,] <-  c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,2]), trt2) # Add Arm2 probability for this patient to outcome_p
}
}
outcome1 <- sum(outcomes[outcomes[,2] == trt1,1])
outcome2 <-sum(outcomes[outcomes[,2] == trt2,1])
ss1 <- nrow(outcomes[outcomes[,2]== trt1,])
ss2 <- nrow(outcomes[outcomes[,2]== trt2,])
addtodf <- rbind(cbind(trt1, outcome1, ss1), cbind(trt2, outcome2, ss2))
df[df$Study == k,2:4] <- addtodf
}
# Put together data
data <- data.prep(df, varname.t = "trtnum", varname.s = "Study")
# Perform analysis using StanNet
model <- makeStanmodel(data = data, outcome = "events", N = "sampleSize", reference = "1", family = "binomial", link = "logit", effects = "random")
fit <- runStan(model = model, n.iter = 12000)
fit2 <- convertToBUGSnetRun(fit)
# check if true d are covered in credible intervals
citable <- nma.league(fit2)$longtable[2:nt,c("lci", "uci")]
# record the lengths
length[i,] <- t(citable$uci-citable$lci)
# check and record if d is included in the interval
coverage[i,] <- d>citable$lci & d<citable$uci
}
# Calculate coverage probabilities and avg lengths
apply(length, MARGIN = 2, mean)
apply(coverage, MARGIN = 2, mean)
# Parameters
muk <- c(0.5, 0.45, 0.55) # Study-specific baseline (probability of event in treatment A in kth study)
d <- c(1.2, 1.3) # Means of random effects distribution
vark <- 0.8 # variance for random effects distributions - could change so its different for each study
Sigmak <- matrix(vark/2, nrow = nt-1, ncol = nt-1)
diag(Sigmak) <- vark
vari <- 0.5 # variance of distribution for patient-specific noise
# Generate patient-specific noise
set.seed(25)
noise <- rnorm(tot_patients, 0, vari)
delta <- matrix(nrow = ns, ncol = nt)
delta[,1] <- 0 # since comparison reference to itself is 0
delta[,2:nt] <- mvrnorm(ns, mu = d, Sigma = Sigmak)
pat_logit_p <-matrix(nrow = tot_patients, ncol = nt+1)
for(i in 1:tot_patients) {
for(j in 1:nt) {
k <- 1 + as.numeric(i>np) + as.numeric(i>(2*np)) # calculate which study the patient is in
pat_logit_p[i,j] <- muk[k] + delta[k,j] + noise[i]
}
pat_logit_p[i,nt+1] <- k # identify which study
}
bernoulli_p <- cbind(expit(pat_logit_p[,1:nt]), pat_logit_p[,nt+1]) # store the probabilities of outcome for each patient depending which trial and which treatment they get allocated to
trial_key <- as.data.frame(t(matrix(c(1,1,2,2,2,3,3,1,3), nrow = 3, ncol = 3, dimnames = list(c("Study", "Arm1", "Arm2")))))
patient_data <- matrix(nrow = tot_patients, ncol = nt)# rows are patients, columns are: outcome probability for treatment 1/2, and trial number
for(k in 1:ns) {
patient_data[(1+np*(k-1)):(np*(k)),] <- bernoulli_p[(1+np*(k-1)):(np*(k)), c(as.numeric(trial_key[k,2:nt]),nt+1)]
}
colnames(patient_data) <- c("Arm1", "Arm2", "Study")
patient_data <- as.data.frame(patient_data)
Nsim <- 10
length <- matrix(nrow = Nsim, ncol = nt-1)
colnames(length) <- c("d12", "d13")
Nsim <- 1000
length <- matrix(nrow = Nsim, ncol = nt-1)
colnames(length) <- c("d12", "d13")
coverage <- length
for(i in 1:Nsim) {
# assign patients to treatment - following a simple randomization procedure
df <- data.frame(Study=sort(rep(seq(1, ns), 2)),
trtnum = numeric(ns*2),
events= numeric(ns*2),
sampleSize = numeric(ns*2)) # preallocate df to hold meta-analytic info
outcomes <- matrix(nrow = np, ncol = 2) # preallocate to holds trt assignment and outcome (success or fail)
for (k in 1:ns) {
trt <- rbinom(np,1,0.5) # if trt = 1, assign to Arm1 else assign to Arm2
trt1 <-trial_key[k,]$Arm1
trt2 <-trial_key[k,]$Arm2
for (ii in 1:length(trt)) {
if (trt[ii]) {
outcomes[ii,] <- c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,1]), trt1) # Determine outcome for this patient using
} else {
outcomes[ii,] <-  c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,2]), trt2) # Add Arm2 probability for this patient to outcome_p
}
}
outcome1 <- sum(outcomes[outcomes[,2] == trt1,1])
outcome2 <-sum(outcomes[outcomes[,2] == trt2,1])
ss1 <- nrow(outcomes[outcomes[,2]== trt1,])
ss2 <- nrow(outcomes[outcomes[,2]== trt2,])
addtodf <- rbind(cbind(trt1, outcome1, ss1), cbind(trt2, outcome2, ss2))
df[df$Study == k,2:4] <- addtodf
}
# Put together data
data <- data.prep(df, varname.t = "trtnum", varname.s = "Study")
# Perform analysis using StanNet
model <- makeStanmodel(data = data, outcome = "events", N = "sampleSize", reference = "1", family = "binomial", link = "logit", effects = "random")
fit <- runStan(model = model, n.iter = 12000)
fit2 <- convertToBUGSnetRun(fit)
# check if true d are covered in credible intervals
citable <- nma.league(fit2)$longtable[2:nt,c("lci", "uci")]
# record the lengths
length[i,] <- t(citable$uci-citable$lci)
# check and record if d is included in the interval
coverage[i,] <- d>citable$lci & d<citable$uci
}
# Calculate coverage probabilities and avg lengths
apply(length, MARGIN = 2, mean)
apply(coverage, MARGIN = 2, mean)
patient_data
trt1
trt2
outcome1
outcome2
ss2
ss2 <- as.numeric(nrow(outcomes[outcomes[,2]== trt2,]))
ss2
ss1 <- ifelse(is.null(nrow(outcomes[outcomes[,2]== trt1,])),0,nrow(outcomes[outcomes[,2]== trt1,]))
ss1
ss2 <- ifelse(is.null(nrow(outcomes[outcomes[,2]== trt2,])),0,nrow(outcomes[outcomes[,2]== trt2,]))
ss2
system.time(for(i in 1:Nsim) {
# assign patients to treatment - following a simple randomization procedure
df <- data.frame(Study=sort(rep(seq(1, ns), 2)),
trtnum = numeric(ns*2),
events= numeric(ns*2),
sampleSize = numeric(ns*2)) # preallocate df to hold meta-analytic info
outcomes <- matrix(nrow = np, ncol = 2) # preallocate to holds trt assignment and outcome (success or fail)
for (k in 1:ns) {
trt <- rbinom(np,1,0.5) # if trt = 1, assign to Arm1 else assign to Arm2
trt1 <-trial_key[k,]$Arm1
trt2 <-trial_key[k,]$Arm2
for (ii in 1:length(trt)) {
if (trt[ii]) {
outcomes[ii,] <- c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,1]), trt1) # Determine outcome for this patient using
} else {
outcomes[ii,] <-  c(rbinom(1, 1, patient_data[patient_data$Study == k,][ii,2]), trt2) # Add Arm2 probability for this patient to outcome_p
}
}
outcome1 <- sum(outcomes[outcomes[,2] == trt1,1])
outcome2 <-sum(outcomes[outcomes[,2] == trt2,1])
ss1 <- ifelse(is.null(nrow(outcomes[outcomes[,2]== trt1,])),0,nrow(outcomes[outcomes[,2]== trt1,]))
ss2 <- ifelse(is.null(nrow(outcomes[outcomes[,2]== trt2,])),0,nrow(outcomes[outcomes[,2]== trt2,]))
addtodf <- rbind(cbind(trt1, outcome1, ss1), cbind(trt2, outcome2, ss2))
df[df$Study == k,2:4] <- addtodf
}
# Put together data
data <- data.prep(df, varname.t = "trtnum", varname.s = "Study")
# Perform analysis using StanNet
model <- makeStanmodel(data = data, outcome = "events", N = "sampleSize", reference = "1", family = "binomial", link = "logit", effects = "random")
fit <- runStan(model = model, n.iter = 12000)
fit2 <- convertToBUGSnetRun(fit)
# check if true d are covered in credible intervals
citable <- nma.league(fit2)$longtable[2:nt,c("lci", "uci")]
# record the lengths
length[i,] <- t(citable$uci-citable$lci)
# check and record if d is included in the interval
coverage[i,] <- d>citable$lci & d<citable$uci
})
model$sd
model$prior.sigma
model$data
model$max.delta
model2 <- nma.model(data = data, outcome = "events", N = "sampleSize", reference = "1", family = "binomial", link = "logit", effects = "random")
fit2<-nma.run(model = model2, n.iter = 10000)
library(devtools)
setwd("~/Masters/Semester 2/840/Final proj/Package/StanNet/R")
devtools::install()
devtools::install()
